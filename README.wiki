= Overview =
This repository is for handling the architectural documents related to specification and design of Eucalyptus features.  Notably, it is '''not''' the source for functional requirements:  those are in JIRA.  Relatedly, the contents here will be reflected in JIRA.

The organization of the repository reflects the long-lived nature of a features true specification.  That is, the specification and design work related to a feature's implementation for a particular release often corresponds with only a portion of the entire feature's implementation.  Moreover, feature's specification evolves over time as the requirements, architecture, and upstream specifications evolve.

We have three classes of documents which contribute to the definition of the system:
# '''Specification Documents''' are overarching definitions of a feature.
# '''Generational Documents''' specific to the context and determined by the constraints of a particular release.
# '''Architectural documents'''<ref>https://github.com/eucalyptus/architecture-docs</ref> are the final documents describing the architecture of the system combining the intensional and emergent characteristics.
#: For more documents see the [[/eucalyptus/architecture-docs|separate architecture docs repository]].

__TOC__
= Documents =

== Specification Documents ==
These documents are intentional and intensional<ref name="Intensional Statement">http://en.wikipedia.org/wiki/Intensional_statement</ref>:
* are "''timeless''" in that they are overarching and meant to be definitive of the feature overall.
* evolve over time independent of the features current implementation status.
* reflect our current understanding of the features definition in the broadest sense.

Specification documents consist of:
* Specification:  overall technical specification of the functional and architectural/quality characteristics.
* High level design/Architecture:  definition of fundamental components, interfaces, behaviours including information, control, and concurrency models.
* Supporting Documents: API/Service specifications, client tool chains, WSDLs, TCKs.

== Generational Documents ==
These documents are specific to a release and meant to serve the tasks surrounding the planning, design, implementation, and delivery of a feature.
* support the scoping, design, and implementation effort of the feature during that release.
* defining the design and implementation objectives and details for a particular version of a feature.
* specific to the context and determined by the constraints of a particular release time frame.
* change as needed to support the above objectives and are quiesced after those tasks are completed.

Generational documents consist of:
* Functional requirements: as identified by a corresponding epic in JIRA
* Specification:  release-specific technical interpretation of functional requirements 

= Links =

* [[TODO|TODO items]] 
* [[features|Feature directory]]

= Contributing =
The contents of this repository are reviewed and, to that end, all changes should be submitted as a pull request: [https://help.github.com/articles/fork-a-repo Fork & Pull].

* Get a [https://github.com/signup/free github account].
* Create a [https://help.github.com/articles/fork-a-repo fork] of this repository.
# [https://help.github.com/articles/syncing-a-fork Synchronize] your fork with this repository.
# Make your changes  ('''NOTE''': See [[#formats|Formats]] and [[#organization|Organization]] below for restrictions/expectations).
# Commit to your forked repository.
# Submit a [https://help.github.com/articles/creating-a-pull-request pull request].
# Be patient and contented.

== Formats ==
Broadly, this repository should have version-able source materials except when not available (e.g., third party PDF documentation).

* '''Text''':  must be renderable through the github interface 
* '''Graphics''':  must be text-based so a compile step is not only acceptable, but required.  
* '''Binary files''': may be committed in the cases that:
*# A binary output format (e.g., images) is needed:  In this case, it has to be compilable from a text-based and versioned file.
*# A reference document or tool is included:  These belong in specific places noted below.
* '''Auto-generated''':  A number of files in this repo are automatically generated **DO NOT EDIT THEM DIRECTLY**
*# Any binary file is either auto-generated or 3rd-party.
*# features/${FEATURE}/stories.wiki

'''Text Format Note'''
-----------
The remainder of this document uses the suffix <code>.wiki</code> to identify a generic file which can be rendered using <code>github-markup</code>.  

To use <code>github-markup</code> see the directions at [[https://github.com/github/markup|the github-markup repository]].

The currently supported and ''seemingly reasonable'' formats are:
* .markdown, .mdown, .md -- <code>gem install redcarpet (https://github.com/vmg/redcarpet)</code>
* .textile -- <code>gem install RedCloth</code>
* .mediawiki -- <code>gem install wikicloth</code>
* .asciidoc -- <code>brew install asciidoc</code>

= Organization =
The following table describes the organization of the top-level of the repository.

{|
|+ '''Top-level Directory Structure'''
| <code>bin/</code>, <code>lib/</code>
| Ignore these. Contain helpers and their libraries
|-
| <code>features/</code>
| this is where '''all''' content goes
|-
| <code>releases/</code>
| auto-generated xref of features to releases
|}

=== Feature Directory ===
Each feature is contained in its own directory.  The organization of the features/${feature} directory, for some imagined ${feature}, is described in the following table:

{|
|+ '''Feature Directory Structure'''
| <code>/overview.wiki</code>
| Top-level feature specification document
|-
| <code>/xref</code>
| xref's to the JIRA epic(s) and confluence pages
|-
| <code>/architecture.wiki</code>
| High level architecture document
|-
| <code>/diagrams</code>
| Source materials for generated documents (images)
|-
| <code>/img</code>
| Generated images
|}

= See Also =
* [https://github.com/github/markup github markup]: github markup library
* [https://github.com/github/gollum gollum]: rendering library used by github-markup
* [https://github.com/pediapress pediapress tools]: mediawiki tools
* [http://mwlib.readthedocs.org/en/latest/installation.html mw-render]: mediawiki renderer
* [https://bitbucket.org/bspeakmon_atlassian/jira-python.git python-jira]: jira library used for xrefs
* [http://plantuml.sourceforge.net/ PlantUML]: text based uml diagramming tool
* [http://www.graphviz.org/ dot/graphviz]: used by plantuml for diagrams


= References =
<references/>
