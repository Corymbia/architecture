= Eucalyptus Specification/Design/Architecture Documents =
Here you will find technical documents which support the evaluation, planning, and implementation of features in [http://www.eucalyptus.com Eucalyptus].  
This the canonical reference for two kinds of documents:  feature specifications used in planning releases and generational design documents which evolve iteratively with the ongoing implementation of the system.  
The purpose of this page is to aggregate and classify these documents from the [https://github.com/eucalyptus/architecture/ underlying repository] with the raw materials.  

= Categories =
{| style="width: 90%"
|+ ''Documents By Category''
| '''Release'''
| [[tag:rls-3.0|3.0]]<br/><code>pending</code>
| [[tag:rls-3.1|3.1]]<br/><code>pending</code>
| [[tag:rls-3.2|3.2]]
| [[tag:rls-3.3|3.3]]<br/><code>pending</code>
|} 

{{SEEALSO}}

__TOC__

= Purpose of Documents =
The purpose of the documents aggregated here is to support the development of new features in Eucalyptus.  To that end, they play a role in several stages of the development process:
# '''Feature specification''':  associated with each feature is an overall document describing the important technical characteristics in a release (or generation) independent fashion.  These reflect the understanding of the feature which is used in subsequent steps.
# '''Scope & Estimation''':  prior to release planning a technical assessment is made about the aspects of functionality to go into a generation of the feature.  The <code>spec</code> documents which are associated with a release start life at that time.  These subsequently evolve until they have been committed to for a particular release (but may be present even when not committed to a release).
# '''Design & Implementation''':  a feature which has been committed to a release is supported by a design document for that release.  The <code>design</code> documents start their life when work towards that release does.  These subsequently evolve until work stops for that release of the feature.  (They would then be ported forward to the final documentation).

= Document Type Descriptions =
There are two classes of documents which you can expect to find the authoritative copy of here:  feature specifications used in planning/estimation of releases and generational design documents which evolve iteratively with the ongoing implementation of the system.  

'''Specification documents''' are intentional and intensional<ref name="Intensional Definition">http://en.wikipedia.org/wiki/Intensional_definition</ref>:
* are "''timeless''" in that they are overarching and meant to be definitive of the feature overall.
* evolve over time independent of the features current implementation status.
* reflect our current understanding of the features definition in the broadest sense.

Specification documents consist of:
* Specification:  overall technical specification of the functional and architectural/quality characteristics.
* High level design/Architecture:  definition of fundamental components, interfaces, behaviours including information, control, and concurrency models.
* Supporting Documents: API/Service specifications, client tool chains, WSDLs, TCKs.

'''Generational Documents''' are specific to a release and meant to serve the tasks surrounding the planning, design, implementation, and delivery of a feature.
* support the scoping, design, and implementation effort of the feature during that release.
* defining the design and implementation objectives and details for a particular version of a feature.
* specific to the context and determined by the constraints of a particular release time frame.
* change as needed to support the above objectives and are quiesced after those tasks are completed.

Generational documents consist of:
* Functional requirements: as identified by a corresponding epic in JIRA
* Specification:  release-specific technical interpretation of functional requirements 

