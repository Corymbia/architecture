= Overview =

This repository is for handling the architectural documents related to specification and design of Eucalyptus features.  Notably, it is '''not''' the source for functional requirements:  those are in JIRA.  Relatedly, the contents here will be reflected in JIRA.

The organization of the repository reflects the long-lived nature of a features true specification.  That is, the specification and design work related to a feature's implementation for a particular release often corresponds with only a portion of the entire feature's implementation.  Moreover, feature's specification evolves over time as the requirements, architecture, and upstream specifications evolve.

We have four classes of documents which contribute to the definition of the system:
# '''Requirements Documents''' <ref name="Eucalyptus JIRA">https://eucalyptus.atlassian.net/secure/Dashboard.jspa</ref>detail the functionality as drawn from various stakeholders.
# '''Specification Documents''' are overarching definitions of a feature's architecture and functionality.
# '''Generational Documents''' specific to the context and determined by the constraints of a particular release.
# '''Architectural documents'''<ref name="Eucalyptus Architecture Docs Repository">https://github.com/eucalyptus/architecture-docs</ref> describe the overall realized design and architecture of the system as released.
#: For more documents see the:
#:: 
#:: '[[https://eucalyptus.atlassian.net/secure/Dashboard.jspa|JIRA bug tracker]].



= See Also =


__TOC__
= Documents =
There are two kinds of documents for which this repository is the canonical reference:  specification and generational documents.

= Document Categories =
{| style="width: 90%"
|+ ''Documents By Category''
| '''Release'''
| [[tag:rls-3.0|3.0]]<br/><code>pending</code>
| [[tag:rls-3.1|3.1]]<br/><code>pending</code>
| [[tag:rls-3.2|3.2]]
| [[tag:rls-3.3|3.3]]<br/><code>pending</code>
|-
| '''Feature'''
| colspan="4" | <code>pending</code>
|-
| '''Component'''
| colspan="4" | <code>pending</code>
|} 

== Specification Documents ==
These documents are intentional and intensional<ref name="Intensional Definition">http://en.wikipedia.org/wiki/Intensional_definition</ref>:
* are "''timeless''" in that they are overarching and meant to be definitive of the feature overall.
* evolve over time independent of the features current implementation status.
* reflect our current understanding of the features definition in the broadest sense.

Specification documents consist of:
* Specification:  overall technical specification of the functional and architectural/quality characteristics.
* High level design/Architecture:  definition of fundamental components, interfaces, behaviours including information, control, and concurrency models.
* Supporting Documents: API/Service specifications, client tool chains, WSDLs, TCKs.

== Generational Documents ==
These documents are specific to a release and meant to serve the tasks surrounding the planning, design, implementation, and delivery of a feature.
* support the scoping, design, and implementation effort of the feature during that release.
* defining the design and implementation objectives and details for a particular version of a feature.
* specific to the context and determined by the constraints of a particular release time frame.
* change as needed to support the above objectives and are quiesced after those tasks are completed.

Generational documents consist of:
* Functional requirements: as identified by a corresponding epic in JIRA
* Specification:  release-specific technical interpretation of functional requirements 





= References =
----
<references/>
