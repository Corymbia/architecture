= Overview =

Implement an AWS compatible Cloud Watch solution.

== Out of Scope ==

VPC, SNS, DynamoDB, Billing, ElastiCache, ElasticMapReduce, RDS, SQS, StorageGateway

== Feature Dependencies ==

Ground true data collection per each system-defined metric.

== Related Features ==

AutoScaling, ELB

= Design =

=== Entity Model ===

Database: eucalyptus_cloudwatch 

Tables: 

system_metric_data_0, system_metric_data_1, ... system_metric_data_f 

custom_metric_data_0, custom_metric_data_1, ... custom_metric_data_f

32 tables with identical columns (metric_data is the template table) (used for PutMetricData/GetMetricStatistics)
list_metrics (metrics for ListMetrics)

CRUD design -- 

metric_data

Create : An aggregation of raw data rows will be persisted with the following column definitions :

Per row entry (hash code of each row for lookup == Dimensions (key:value), metric_type : table used will be based on first character of sha1 hash of dimensions and metric type) - user, account, MetricName, MetricType(Predefined or User Custom), NameSpace, timestamp, units, SUM, sample points, max, min, dimension columns (dim_x_name, dim_x_value for x between 1 and 10)
System metrics are "folded", one row per each dimension combination, custom metrics are single row entries.

(Note, timestamp format :  http://en.wikipedia.org/wiki/ISO_8601 : Timestamps to be truncated to the previous minute)

Read : The key for search will be based on the a hash code that represents a possible combination of dimension (key:value), metric name, namespace, metric type, and possibly units

Update : Not required

Delete - removes rows in which have a time stamp that is equals (current system time - (current time + two weeks))

Open Question - with dimension hash, is having the list of all actual dimensions in the tables necessary?  The 
list_metrics table is updated at the same time as the above tables, and the dimension information is available 
outside the tables at this point in time.

list_metrics

Create : The metric info (without metric value), will be persisted persisted with the following column definitions :

Per row entry - account, uuid, MetricName, NameSpace, timestamp (create and update), dimension columns (dim_x_name, dim_x_value for x between 1 and 10)

Read: Searches can be based on metric name, namespace, or a dimension list (dimension subset match is allowed).  
Result will include the entire dimension list entered with the metric

Update: Only the update timestamp of the list_metrics row will be updated

Delete - remove rows that have an update time stamp that is equals (current system time - (current time + two weeks)).

Uniqueness_Constraints: Only the combination of account_id, metric_name, namespace, and dimension key/values (in order) need to be unique.  This is the purpose of the hash.

=== Service Impact ===

CLC -> Consume general jvm resource the cloud controller

DB -> additional jdbc connections 

Alarms -> additional duty cycle in which will spawn more threads

Must be HA compliant 

=== Put Metric Workflow ===

[[put-metric-data-workflow.png]] 

=== Put Metric Workflow Diagram Definitions === 

* PutMetricData -> user created request 

* Cloud Watch Service -> Eucalyptus implementation of the Cloud Watch Service

* Raw Data Queue -> FIFO queue

* Aggregation -> Function to process an aggregation of one minute window of raw data to be inserted into the database.  Every put_metric_data call also updates the list_metrics table

* Cleaner -> House keeping process to delete metric data from the database with a 2 week window  

* Data Points Rows -> Processed information

=== List Metrics Workflow ===

[[list-metrics-workflow.png]] 

=== List Metrics Workflow Diagram Definitions === 

* ListMetrics -> user created request 

* Cloud Watch Service -> Eucalyptus implementation of the Cloud Watch Service

* Cleaner -> House keeping process to delete metric data from the database with a 2 week window  

* list_metrics -> Processed information

=== Database Purge ===

Global period data deletion after 2 weeks.

=== Discovery ===
Filters should be discovered, whether individually, per type or per API.

= Upgrade =
No upgrade impact noted.

= Packaging =
No specific packaging requirements.

= Documentation =
*Need feedback from the docs team

= Security =
Each operation must adhere with the Eucalyptus implementation of the IAM-compatible identity management system.

= Testing =
Testing should cover SOAP and Query APIs 

= References =
AWS Cloud Watch : http://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/Welcome.html
JIRA https://eucalyptus.atlassian.net/browse/EUCA-4307

